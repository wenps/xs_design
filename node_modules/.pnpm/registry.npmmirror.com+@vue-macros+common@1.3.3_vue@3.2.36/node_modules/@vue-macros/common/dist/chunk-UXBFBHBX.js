"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }

var _chunkCAJGRTIWjs = require('./chunk-CAJGRTIW.js');


var _chunkQGPQPPMMjs = require('./chunk-QGPQPPMM.js');


var _chunkAXNY6RSYjs = require('./chunk-AXNY6RSY.js');

// src/vue.ts


var _compilersfc = require('@vue/compiler-sfc');
function parseSFC(code, id) {
  var _a, _b;
  const sfc = _compilersfc.parse.call(void 0, code, {
    filename: id
  });
  const { descriptor, errors } = sfc;
  const scriptLang = (_a = sfc.descriptor.script) == null ? void 0 : _a.lang;
  const scriptSetupLang = (_b = sfc.descriptor.scriptSetup) == null ? void 0 : _b.lang;
  if (sfc.descriptor.script && sfc.descriptor.scriptSetup && (scriptLang || "js") !== (scriptSetupLang || "js")) {
    throw new Error(
      `[unplugin-vue-macros] <script> and <script setup> must have the same language type.`
    );
  }
  const lang = scriptLang || scriptSetupLang;
  return {
    sfc,
    ...descriptor,
    lang,
    errors,
    getSetupAst() {
      if (!descriptor.scriptSetup)
        return;
      return _chunkCAJGRTIWjs.babelParse.call(void 0, descriptor.scriptSetup.content, lang);
    },
    getScriptAst() {
      if (!descriptor.script)
        return;
      return _chunkCAJGRTIWjs.babelParse.call(void 0, descriptor.script.content, lang);
    }
  };
}
function getFileCodeAndLang(code, id) {
  var _a;
  if (!_chunkAXNY6RSYjs.REGEX_VUE_SFC.test(id)) {
    return {
      code,
      lang: _chunkQGPQPPMMjs.getLang.call(void 0, id)
    };
  }
  const sfc = parseSFC(code, id);
  const scriptCode = _nullishCoalesce(((_a = sfc.script) == null ? void 0 : _a.content), () => ( ""));
  return {
    code: sfc.scriptSetup ? `${scriptCode}
;
${sfc.scriptSetup.content}` : scriptCode,
    lang: _nullishCoalesce(sfc.lang, () => ( "js"))
  };
}
function addNormalScript({ script, lang }, s) {
  return {
    start() {
      if (script)
        return script.loc.end.offset;
      const attrs = lang ? ` lang="${lang}"` : "";
      s.prependLeft(0, `<script${attrs}>`);
      return 0;
    },
    end() {
      if (!script)
        s.appendRight(0, `
</script>
`);
    }
  };
}





exports.parseSFC = parseSFC; exports.getFileCodeAndLang = getFileCodeAndLang; exports.addNormalScript = addNormalScript;
