import {
  babelParse
} from "./chunk-3WZJ7533.mjs";
import {
  getLang
} from "./chunk-CXF4NBOL.mjs";
import {
  REGEX_VUE_SFC
} from "./chunk-VX3SYI7Y.mjs";

// src/vue.ts
import {
  parse
} from "@vue/compiler-sfc";
function parseSFC(code, id) {
  var _a, _b;
  const sfc = parse(code, {
    filename: id
  });
  const { descriptor, errors } = sfc;
  const scriptLang = (_a = sfc.descriptor.script) == null ? void 0 : _a.lang;
  const scriptSetupLang = (_b = sfc.descriptor.scriptSetup) == null ? void 0 : _b.lang;
  if (sfc.descriptor.script && sfc.descriptor.scriptSetup && (scriptLang || "js") !== (scriptSetupLang || "js")) {
    throw new Error(
      `[unplugin-vue-macros] <script> and <script setup> must have the same language type.`
    );
  }
  const lang = scriptLang || scriptSetupLang;
  return {
    sfc,
    ...descriptor,
    lang,
    errors,
    getSetupAst() {
      if (!descriptor.scriptSetup)
        return;
      return babelParse(descriptor.scriptSetup.content, lang);
    },
    getScriptAst() {
      if (!descriptor.script)
        return;
      return babelParse(descriptor.script.content, lang);
    }
  };
}
function getFileCodeAndLang(code, id) {
  var _a;
  if (!REGEX_VUE_SFC.test(id)) {
    return {
      code,
      lang: getLang(id)
    };
  }
  const sfc = parseSFC(code, id);
  const scriptCode = ((_a = sfc.script) == null ? void 0 : _a.content) ?? "";
  return {
    code: sfc.scriptSetup ? `${scriptCode}
;
${sfc.scriptSetup.content}` : scriptCode,
    lang: sfc.lang ?? "js"
  };
}
function addNormalScript({ script, lang }, s) {
  return {
    start() {
      if (script)
        return script.loc.end.offset;
      const attrs = lang ? ` lang="${lang}"` : "";
      s.prependLeft(0, `<script${attrs}>`);
      return 0;
    },
    end() {
      if (!script)
        s.appendRight(0, `
</script>
`);
    }
  };
}

export {
  parseSFC,
  getFileCodeAndLang,
  addNormalScript
};
